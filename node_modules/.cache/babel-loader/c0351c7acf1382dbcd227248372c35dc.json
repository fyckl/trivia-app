{"ast":null,"code":"var _jsxFileName = \"I:\\\\My-work\\\\Web-development\\\\React 2022 Course\\\\trivia-app\\\\src\\\\Components\\\\Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext();\n\nfunction ContextProvider(props) {\n  _s();\n\n  const [isStartQuiz, setIsStartQuiz] = useState(false);\n  const [arrQuestions, setArrQuestions] = useState([]);\n  const [isPlayAgain, setIsPlayAgain] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isShuffleAnswers, setIsShuffleAnswers] = useState(false);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n\n  function startQuiz() {\n    setIsShuffleAnswers(true);\n    setIsStartQuiz(true);\n  }\n\n  function newSelectedAnswersArr() {\n    setSelectedAnswers(() => {\n      const newArr = [];\n      arrQuestions.forEach(item => {\n        newArr.push({\n          id: item.correct_answer,\n          selectedAnswer: \"\"\n        });\n      });\n      return newArr;\n    });\n  }\n\n  function checkAnswers() {\n    setIsShuffleAnswers(false);\n    setIsPlayAgain(true);\n    setCorrectAnswers(() => {\n      const correctAnswersArr = selectedAnswers.filter(item => item.selectedAnswer === item.id);\n      return correctAnswersArr.length;\n    });\n  }\n\n  function reset() {\n    setArrQuestions([]);\n    getQuestions();\n    setIsPlayAgain(false);\n    setCorrectAnswers(0);\n    setIsShuffleAnswers(true);\n  }\n\n  function getQuestions() {\n    fetch('https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple&encode=base64').then(res => res.json()).then(data => setArrQuestions(data.results)).catch(err => {\n      console.log(err);\n      setIsStartQuiz(false);\n    });\n  }\n\n  useEffect(() => {\n    setScore(prevState => prevState + correctAnswers);\n  }, [correctAnswers]);\n  useEffect(() => {\n    newSelectedAnswersArr();\n  }, [arrQuestions]);\n  useEffect(() => {\n    getQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      startQuiz,\n      isStartQuiz,\n      arrQuestions,\n      setCorrectAnswers,\n      checkAnswers,\n      isPlayAgain,\n      correctAnswers,\n      reset,\n      score,\n      isShuffleAnswers,\n      setSelectedAnswers,\n      selectedAnswers\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContextProvider, \"9QMCWs4Hxq0PNgmSKGYLaNgHqrk=\");\n\n_c = ContextProvider;\nexport { ContextProvider, Context };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["I:/My-work/Web-development/React 2022 Course/trivia-app/src/Components/Context.js"],"names":["React","createContext","useState","useEffect","Context","ContextProvider","props","isStartQuiz","setIsStartQuiz","arrQuestions","setArrQuestions","isPlayAgain","setIsPlayAgain","correctAnswers","setCorrectAnswers","score","setScore","isShuffleAnswers","setIsShuffleAnswers","selectedAnswers","setSelectedAnswers","startQuiz","newSelectedAnswersArr","newArr","forEach","item","push","id","correct_answer","selectedAnswer","checkAnswers","correctAnswersArr","filter","length","reset","getQuestions","fetch","then","res","json","data","results","catch","err","console","log","prevState","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\n\r\nconst Context = createContext()\r\n\r\nfunction ContextProvider(props) {\r\n\r\n    const [isStartQuiz, setIsStartQuiz] = useState(false)\r\n    const [arrQuestions, setArrQuestions] = useState([])\r\n    const [isPlayAgain, setIsPlayAgain] = useState(false)\r\n    const [correctAnswers, setCorrectAnswers] = useState(0)\r\n    const [score, setScore] = useState(0)\r\n    const [isShuffleAnswers, setIsShuffleAnswers] = useState(false)\r\n    const [selectedAnswers, setSelectedAnswers] = useState([])\r\n\r\n    function startQuiz(){\r\n      setIsShuffleAnswers(true)\r\n      setIsStartQuiz(true)\r\n    }\r\n\r\n    function newSelectedAnswersArr(){\r\n      setSelectedAnswers(() => {\r\n        const newArr = []\r\n        arrQuestions.forEach(item => {\r\n          newArr.push({id: item.correct_answer, selectedAnswer: \"\"}) \r\n        });\r\n        return newArr\r\n      })\r\n    }\r\n\r\n    function checkAnswers(){\r\n      setIsShuffleAnswers(false)\r\n      setIsPlayAgain(true)\r\n      setCorrectAnswers(() => {\r\n        const correctAnswersArr = selectedAnswers.filter(item => (\r\n          item.selectedAnswer === item.id\r\n          )) \r\n          return correctAnswersArr.length\r\n        })\r\n      }\r\n      \r\n      \r\n    function reset(){\r\n      setArrQuestions([])\r\n      getQuestions()\r\n      setIsPlayAgain(false)\r\n      setCorrectAnswers(0)\r\n      setIsShuffleAnswers(true)\r\n    }\r\n    \r\n    function getQuestions(){\r\n      fetch('https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple&encode=base64')\r\n      .then(res=> res.json())\r\n      .then(data=> setArrQuestions(data.results))\r\n      .catch(err => {\r\n        console.log(err)\r\n        setIsStartQuiz(false)\r\n      })\r\n    }\r\n\r\n    useEffect(() => {\r\n      setScore(prevState => prevState + correctAnswers)\r\n    }, [correctAnswers])\r\n    \r\n    useEffect(() => {\r\n      newSelectedAnswersArr()\r\n    }, [arrQuestions])\r\n    \r\n    useEffect(() => {\r\n      getQuestions()\r\n    }, [])\r\n\r\n    return(\r\n        <Context.Provider \r\n            value={{\r\n                startQuiz, \r\n                isStartQuiz, \r\n                arrQuestions,\r\n                setCorrectAnswers,\r\n                checkAnswers,\r\n                isPlayAgain,\r\n                correctAnswers,\r\n                reset,\r\n                score,\r\n                isShuffleAnswers,\r\n                setSelectedAnswers,\r\n                selectedAnswers\r\n        }}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport {ContextProvider, Context}"]},"metadata":{},"sourceType":"module"}