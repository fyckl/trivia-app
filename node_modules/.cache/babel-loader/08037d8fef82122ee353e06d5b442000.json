{"ast":null,"code":"var _jsxFileName = \"I:\\\\My-work\\\\Web-development\\\\React 2022 Course\\\\trivia-app\\\\src\\\\Components\\\\Answer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Context } from \"./Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Answer(props) {\n  _s();\n\n  const {\n    // setCorrectAnswers, \n    isPlayAgain,\n    selectedAnswers,\n    setSelectedAnswers\n  } = useContext(Context);\n  const [correctAnswer, setCorrectAnswer] = useState(props.correctanswer);\n\n  const isSelected = answer => answer.selectedAnswer !== props.answers; // const isCorrect = (answer) => answer.id === answer.selectAnswer\n\n\n  const selectedAnswerClass = !isPlayAgain ? selectedAnswers.every(isSelected) ? \"answer-button\" : \"selected-answer\" : selectedAnswers.every(isSelected) ? \"answer-button\" : \"incorrect-answer\";\n  const buttonClass = isPlayAgain && correctAnswer === props.answers ? \"correct-answer\" : selectedAnswerClass;\n\n  function selectAnswer() {\n    setSelectedAnswers(prevState => prevState.map(item => {\n      return correctAnswer === item.id ? { ...item,\n        selectedAnswer: props.answers\n      } : { ...item\n      };\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: buttonClass,\n    onClick: selectAnswer,\n    disabled: isPlayAgain,\n    children: atob(props.answers)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Answer, \"EutBCurlF9q1FcMSjH0jP+BB+bk=\");\n\n_c = Answer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"sources":["I:/My-work/Web-development/React 2022 Course/trivia-app/src/Components/Answer.js"],"names":["React","useState","useEffect","useContext","Context","Answer","props","isPlayAgain","selectedAnswers","setSelectedAnswers","correctAnswer","setCorrectAnswer","correctanswer","isSelected","answer","selectedAnswer","answers","selectedAnswerClass","every","buttonClass","selectAnswer","prevState","map","item","id","atob"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AAEpC,QAAM;AACJ;AACAC,IAAAA,WAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA;AAJI,MAKFN,UAAU,CAACC,OAAD,CALd;AAOA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAACK,KAAK,CAACM,aAAP,CAAlD;;AAEA,QAAMC,UAAU,GAAIC,MAAD,IAAYA,MAAM,CAACC,cAAP,KAA0BT,KAAK,CAACU,OAA/D,CAXoC,CAapC;;;AAEA,QAAMC,mBAAmB,GAAG,CAACV,WAAD,GAC3BC,eAAe,CAACU,KAAhB,CAAsBL,UAAtB,IAAoC,eAApC,GAAsD,iBAD3B,GAE3BL,eAAe,CAACU,KAAhB,CAAsBL,UAAtB,IAAoC,eAApC,GAAsD,kBAFvD;AAIA,QAAMM,WAAW,GAAIZ,WAAW,IAAKG,aAAa,KAAKJ,KAAK,CAACU,OAAzC,GAAqD,gBAArD,GAAwEC,mBAA5F;;AAEA,WAASG,YAAT,GAAuB;AACrBX,IAAAA,kBAAkB,CAACY,SAAS,IAAIA,SAAS,CAACC,GAAV,CAAcC,IAAI,IAAI;AACpD,aAAOb,aAAa,KAAKa,IAAI,CAACC,EAAvB,GAA4B,EAAC,GAAGD,IAAJ;AAAUR,QAAAA,cAAc,EAAET,KAAK,CAACU;AAAhC,OAA5B,GAAuE,EAAC,GAAGO;AAAJ,OAA9E;AACD,KAF+B,CAAd,CAAlB;AAGD;;AACD,sBACM;AACA,IAAA,SAAS,EAAEJ,WADX;AAEA,IAAA,OAAO,EAAEC,YAFT;AAGA,IAAA,QAAQ,EAAEb,WAHV;AAAA,cAIEkB,IAAI,CAACnB,KAAK,CAACU,OAAP;AAJN;AAAA;AAAA;AAAA;AAAA,UADN;AAOD;;GAjCuBX,M;;KAAAA,M","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\r\nimport { Context } from \"./Context\"\r\n\r\nexport default function Answer(props) {\r\n\r\n  const {\r\n    // setCorrectAnswers, \r\n    isPlayAgain, \r\n    selectedAnswers, \r\n    setSelectedAnswers\r\n  } = useContext(Context)\r\n  \r\n  const [correctAnswer, setCorrectAnswer] = useState(props.correctanswer)\r\n  \r\n  const isSelected = (answer) => answer.selectedAnswer !== props.answers\r\n  \r\n  // const isCorrect = (answer) => answer.id === answer.selectAnswer\r\n\r\n  const selectedAnswerClass = !isPlayAgain ? \r\n  (selectedAnswers.every(isSelected) ? \"answer-button\" : \"selected-answer\") : \r\n  (selectedAnswers.every(isSelected) ? \"answer-button\" : \"incorrect-answer\")\r\n\r\n  const buttonClass = (isPlayAgain && (correctAnswer === props.answers)) ? \"correct-answer\" : selectedAnswerClass\r\n\r\n  function selectAnswer(){\r\n    setSelectedAnswers(prevState => prevState.map(item => {\r\n      return correctAnswer === item.id ? {...item, selectedAnswer: props.answers} : {...item}\r\n    }))\r\n  }\r\n  return (\r\n        <button \r\n        className={buttonClass} \r\n        onClick={selectAnswer} \r\n        disabled={isPlayAgain}\r\n        >{atob(props.answers)}</button>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}