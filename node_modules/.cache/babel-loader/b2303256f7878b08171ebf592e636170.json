{"ast":null,"code":"var _jsxFileName = \"I:\\\\My-work\\\\Web-development\\\\React 2022 Course\\\\trivia-app\\\\src\\\\Components\\\\Answer.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useAppContext } from \"./Context\";\nimport { Buffer } from 'buffer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Answer(_ref) {\n  _s();\n\n  let {\n    answers,\n    correctAnswer\n  } = _ref;\n  const {\n    isPlayAgain,\n    selectedAnswers,\n    setSelectedAnswers\n  } = useAppContext();\n\n  const selectedAnswer = answer => answer.selectedAnswer !== answers;\n\n  const isSelected = selectedAnswers.every(selectedAnswer);\n  const selectedAnswerClass = !isPlayAgain ? isSelected ? \"answer-button\" : \"selected-answer\" : isSelected ? \"answer-button\" : \"incorrect-answer\";\n  const buttonClass = isPlayAgain && correctAnswer === answers ? \"correct-answer\" : selectedAnswerClass;\n  const decodedAnswers = Buffer.from(answers, 'base64').toString();\n\n  function selectAnswer() {\n    setSelectedAnswers(prevState => prevState.map(item => {\n      return correctAnswer === item.id ? { ...item,\n        selectedAnswer: answers\n      } : { ...item\n      };\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: buttonClass,\n    onClick: selectAnswer,\n    disabled: isPlayAgain,\n    children: decodedAnswers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Answer, \"nwoSPvkTEcFv3P51HAO29O+v5gA=\", false, function () {\n  return [useAppContext];\n});\n\n_c = Answer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"sources":["I:/My-work/Web-development/React 2022 Course/trivia-app/src/Components/Answer.js"],"names":["React","useAppContext","Buffer","Answer","answers","correctAnswer","isPlayAgain","selectedAnswers","setSelectedAnswers","selectedAnswer","answer","isSelected","every","selectedAnswerClass","buttonClass","decodedAnswers","from","toString","selectAnswer","prevState","map","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,MAAT,OAA2C;AAAA;;AAAA,MAA3B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAA2B;AAExD,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA;AAHI,MAIFP,aAAa,EAJjB;;AAMA,QAAMQ,cAAc,GAAIC,MAAD,IAAYA,MAAM,CAACD,cAAP,KAA0BL,OAA7D;;AACA,QAAMO,UAAU,GAAGJ,eAAe,CAACK,KAAhB,CAAsBH,cAAtB,CAAnB;AAEA,QAAMI,mBAAmB,GACzB,CAACP,WAAD,GACCK,UAAU,GAAG,eAAH,GAAqB,iBADhC,GAECA,UAAU,GAAG,eAAH,GAAqB,kBAHhC;AAKA,QAAMG,WAAW,GAChBR,WAAW,IAAKD,aAAa,KAAKD,OAAnC,GACA,gBADA,GAEAS,mBAHA;AAKA,QAAME,cAAc,GAAGb,MAAM,CAACc,IAAP,CAAYZ,OAAZ,EAAqB,QAArB,EAA+Ba,QAA/B,EAAvB;;AACA,WAASC,YAAT,GAAuB;AACrBV,IAAAA,kBAAkB,CAACW,SAAS,IAAIA,SAAS,CAACC,GAAV,CAAcC,IAAI,IAAI;AACpD,aAAOhB,aAAa,KAAKgB,IAAI,CAACC,EAAvB,GAA4B,EAAC,GAAGD,IAAJ;AAAUZ,QAAAA,cAAc,EAAEL;AAA1B,OAA5B,GAAiE,EAAC,GAAGiB;AAAJ,OAAxE;AACD,KAF+B,CAAd,CAAlB;AAGD;;AAED,sBACM;AACE,IAAA,SAAS,EAAEP,WADb;AAEE,IAAA,OAAO,EAAEI,YAFX;AAGE,IAAA,QAAQ,EAAEZ,WAHZ;AAAA,cAKGS;AALH;AAAA;AAAA;AAAA;AAAA,UADN;AASD;;GArCuBZ,M;UAMlBF,a;;;KANkBE,M","sourcesContent":["import React from 'react'\r\nimport { useAppContext } from \"./Context\"\r\nimport { Buffer } from 'buffer'\r\n\r\nexport default function Answer({ answers, correctAnswer}) {\r\n\r\n  const {\r\n    isPlayAgain, \r\n    selectedAnswers, \r\n    setSelectedAnswers\r\n  } = useAppContext()\r\n  \r\n  const selectedAnswer = (answer) => answer.selectedAnswer !== answers\r\n  const isSelected = selectedAnswers.every(selectedAnswer)\r\n\r\n  const selectedAnswerClass = \r\n  !isPlayAgain ? \r\n  (isSelected ? \"answer-button\" : \"selected-answer\") : \r\n  (isSelected ? \"answer-button\" : \"incorrect-answer\")\r\n\r\n  const buttonClass = \r\n  (isPlayAgain && (correctAnswer === answers)) ? \r\n  \"correct-answer\" : \r\n  selectedAnswerClass\r\n\r\n  const decodedAnswers = Buffer.from(answers, 'base64').toString()\r\n  function selectAnswer(){\r\n    setSelectedAnswers(prevState => prevState.map(item => {\r\n      return correctAnswer === item.id ? {...item, selectedAnswer: answers} : {...item}\r\n    }))\r\n  }\r\n\r\n  return (\r\n        <button \r\n          className={buttonClass} \r\n          onClick={selectAnswer} \r\n          disabled={isPlayAgain}\r\n        >\r\n          {decodedAnswers}\r\n        </button>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}