{"ast":null,"code":"var _jsxFileName = \"I:\\\\My-work\\\\Web-development\\\\React 2022 Course\\\\trivia-app\\\\src\\\\Components\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Answer from './Answer';\nimport { Context, useAppContext } from \"./Context\";\nimport { Buffer } from 'buffer';\nimport useShuffleArr from '../Hooks/useShuffleArr';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(_ref) {\n  _s();\n\n  let {\n    question,\n    incorrectAnswers,\n    correctAnswer\n  } = _ref;\n  const arrAnswers = incorrectAnswers.concat(correctAnswer);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n  const {\n    isShuffleAnswers\n  } = useAppContext();\n  const shuffleArr = useShuffleArr(arrAnswers);\n  useEffect(() => {\n    if (isShuffleAnswers) {\n      setShuffledAnswers(shuffleArr);\n    }\n  }, [isShuffleAnswers]);\n  const answers = shuffledAnswers.map(item => {\n    return /*#__PURE__*/_jsxDEV(Answer, {\n      answers: item,\n      correctAnswer: correctAnswer\n    }, item, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this);\n  });\n  const decodedQuestion = Buffer.from(question['base64']).toString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    \"data-testid\": \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"question\",\n      children: decodedQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), answers, /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"hr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Question, \"fNbTipZCvC8UfBTgbxVjtXorMRI=\", false, function () {\n  return [useAppContext, useShuffleArr];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["I:/My-work/Web-development/React 2022 Course/trivia-app/src/Components/Question.js"],"names":["React","useState","useEffect","useContext","Answer","Context","useAppContext","Buffer","useShuffleArr","Question","question","incorrectAnswers","correctAnswer","arrAnswers","concat","shuffledAnswers","setShuffledAnswers","isShuffleAnswers","shuffleArr","answers","map","item","decodedQuestion","from","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,WAAvC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;;AAEA,SAASC,QAAT,OAA+D;AAAA;;AAAA,MAA7C;AAACC,IAAAA,QAAD;AAAWC,IAAAA,gBAAX;AAA6BC,IAAAA;AAA7B,GAA6C;AAE7D,QAAMC,UAAU,GAAGF,gBAAgB,CAACG,MAAjB,CAAwBF,aAAxB,CAAnB;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAuBX,aAAa,EAA1C;AACA,QAAMY,UAAU,GAAGV,aAAa,CAACK,UAAD,CAAhC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGe,gBAAH,EAAoB;AAClBD,MAAAA,kBAAkB,CAACE,UAAD,CAAlB;AACD;AACF,GAJQ,EAIN,CAACD,gBAAD,CAJM,CAAT;AAMA,QAAME,OAAO,GAAGJ,eAAe,CAACK,GAAhB,CAAqBC,IAAD,IAAU;AAC1C,wBAAO,QAAC,MAAD;AAAmB,MAAA,OAAO,EAAEA,IAA5B;AAAkC,MAAA,aAAa,EAAET;AAAjD,OAAaS,IAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFe,CAAhB;AAGA,QAAMC,eAAe,GAAGf,MAAM,CAACgB,IAAP,CAAYb,QAAQ,CAAC,QAAD,CAApB,EAAgCc,QAAhC,EAAxB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,mBAAY,WAAhD;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKH,OAFL,eAGI;AAAI,MAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAxBQV,Q;UAIsBH,a,EACVE,a;;;KALZC,Q;AA0BT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\r\nimport Answer from './Answer'\r\nimport { Context, useAppContext } from \"./Context\"\r\nimport { Buffer } from 'buffer'\r\nimport useShuffleArr from '../Hooks/useShuffleArr'\r\n\r\nfunction Question({question, incorrectAnswers, correctAnswer}) {\r\n  \r\n  const arrAnswers = incorrectAnswers.concat(correctAnswer)\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([])\r\n  const { isShuffleAnswers } = useAppContext()\r\n  const shuffleArr = useShuffleArr(arrAnswers)\r\n\r\n  useEffect(() => {\r\n    if(isShuffleAnswers){\r\n      setShuffledAnswers(shuffleArr)\r\n    }\r\n  }, [isShuffleAnswers])\r\n\r\n  const answers = shuffledAnswers.map((item) => {\r\n      return <Answer key={item} answers={item} correctAnswer={correctAnswer}/>\r\n  })\r\n  const decodedQuestion = Buffer.from(question['base64']).toString()\r\n  return (\r\n    <div className='question-container' data-testid=\"container\">\r\n        <h3 className='question'>{decodedQuestion}</h3>\r\n        {answers}\r\n        <hr className='hr'/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Question"]},"metadata":{},"sourceType":"module"}