{"ast":null,"code":"var _jsxFileName = \"I:\\\\My-work\\\\Web-development\\\\React 2022 Course\\\\trivia-app\\\\src\\\\Components\\\\Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext();\n\nfunction ContextProvider(props) {\n  _s();\n\n  const [startQuiz, setStartQuiz] = useState(false);\n  const [arrQuestions, setArrQuestions] = useState([]);\n  const [playAgain, setPlayAgain] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [score, setScore] = useState(0);\n\n  function quizStart() {\n    setStartQuiz(true);\n  }\n\n  function checkAnswers() {\n    setPlayAgain(true);\n  }\n\n  useEffect(() => {\n    setScore(prevState => prevState + correctAnswers);\n  }, [playAgain]);\n\n  function reset() {\n    setPlayAgain(false);\n    setArrQuestions([]);\n    getQuestions();\n    setCorrectAnswers(0);\n  }\n\n  function getQuestions() {\n    fetch('https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple&encode=base64').then(res => res.json()).then(data => setArrQuestions(data.results));\n  } // console.log(arrQuestions)\n\n\n  useEffect(() => {\n    getQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      quizStart,\n      startQuiz,\n      arrQuestions,\n      setCorrectAnswers,\n      checkAnswers,\n      playAgain,\n      correctAnswers,\n      reset,\n      score\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContextProvider, \"hYJCPYkbZxI053GEtLSW751Nhl0=\");\n\n_c = ContextProvider;\nexport { ContextProvider, Context };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["I:/My-work/Web-development/React 2022 Course/trivia-app/src/Components/Context.js"],"names":["React","useContext","useState","useEffect","Context","createContext","ContextProvider","props","startQuiz","setStartQuiz","arrQuestions","setArrQuestions","playAgain","setPlayAgain","correctAnswers","setCorrectAnswers","score","setScore","quizStart","checkAnswers","prevState","reset","getQuestions","fetch","then","res","json","data","results","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;;AAEA,MAAMC,OAAO,gBAAGJ,KAAK,CAACK,aAAN,EAAhB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAE5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CAAD,CAAlC;;AAEA,WAASgB,SAAT,GAAoB;AAClBT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASU,YAAT,GAAuB;AACrBN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAEDV,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACG,SAAS,IAAIA,SAAS,GAAGN,cAA1B,CAAR;AACD,GAFQ,EAEN,CAACF,SAAD,CAFM,CAAT;;AAIA,WAASS,KAAT,GAAgB;AACdR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAW,IAAAA,YAAY;AACZP,IAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACD;;AAED,WAASO,YAAT,GAAuB;AACrBC,IAAAA,KAAK,CAAC,kFAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAGA,GAAG,CAACC,IAAJ,EADZ,EAECF,IAFD,CAEMG,IAAI,IAAGhB,eAAe,CAACgB,IAAI,CAACC,OAAN,CAF5B;AAGD,GA/B2B,CAkC5B;;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,QAAC,OAAD,CAAS,QAAT;AACI,IAAA,KAAK,EAAE;AACHJ,MAAAA,SADG;AAEHV,MAAAA,SAFG;AAGHE,MAAAA,YAHG;AAIHK,MAAAA,iBAJG;AAKHI,MAAAA,YALG;AAMHP,MAAAA,SANG;AAOHE,MAAAA,cAPG;AAQHO,MAAAA,KARG;AASHL,MAAAA;AATG,KADX;AAAA,cAYKT,KAAK,CAACsB;AAZX;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAvDQvB,e;;KAAAA,e;AAyDT,SAAQA,eAAR,EAAyBF,OAAzB","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider(props) {\r\n\r\n    const [startQuiz, setStartQuiz] = useState(false)\r\n    const [arrQuestions, setArrQuestions] = useState([])\r\n    const [playAgain, setPlayAgain] = useState(false)\r\n    const [correctAnswers, setCorrectAnswers] = useState(0)\r\n    const [score, setScore] = useState(0)\r\n\r\n    function quizStart(){\r\n      setStartQuiz(true)\r\n    }\r\n\r\n    function checkAnswers(){\r\n      setPlayAgain(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n      setScore(prevState => prevState + correctAnswers)\r\n    }, [playAgain])\r\n\r\n    function reset(){\r\n      setPlayAgain(false)\r\n      setArrQuestions([])\r\n      getQuestions()\r\n      setCorrectAnswers(0)\r\n    }\r\n\r\n    function getQuestions(){\r\n      fetch('https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple&encode=base64')\r\n      .then(res=> res.json())\r\n      .then(data=> setArrQuestions(data.results))\r\n    }\r\n\r\n    \r\n    // console.log(arrQuestions)\r\n    useEffect(() => {\r\n      getQuestions()\r\n    }, [])\r\n\r\n    return(\r\n        <Context.Provider \r\n            value={{\r\n                quizStart, \r\n                startQuiz, \r\n                arrQuestions,\r\n                setCorrectAnswers,\r\n                checkAnswers,\r\n                playAgain,\r\n                correctAnswers,\r\n                reset,\r\n                score\r\n        }}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport {ContextProvider, Context}"]},"metadata":{},"sourceType":"module"}